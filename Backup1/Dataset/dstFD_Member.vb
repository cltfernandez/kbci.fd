'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dstFD_Member
    Inherits DataSet
    
    Private tableFD_Ledger As FD_LedgerDataTable
    
    Private tableD_Tran As D_TranDataTable
    
    Private tableMEM_List As MEM_ListDataTable
    
    Private tableR_Members As R_MembersDataTable
    
    Private tableFD_Rup As FD_RupDataTable
    
    Private tableCASHDIVR As CASHDIVRDataTable
    
    Private tablePATREF As PATREFDataTable
    
    Private tablePATREFS As PATREFSDataTable
    
    Private tableDIVREFREG As DIVREFREGDataTable
    
    Private tableVOUCHER As VOUCHERDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("FD_Ledger")) Is Nothing) Then
                Me.Tables.Add(New FD_LedgerDataTable(ds.Tables("FD_Ledger")))
            End If
            If (Not (ds.Tables("D_Tran")) Is Nothing) Then
                Me.Tables.Add(New D_TranDataTable(ds.Tables("D_Tran")))
            End If
            If (Not (ds.Tables("MEM_List")) Is Nothing) Then
                Me.Tables.Add(New MEM_ListDataTable(ds.Tables("MEM_List")))
            End If
            If (Not (ds.Tables("R_Members")) Is Nothing) Then
                Me.Tables.Add(New R_MembersDataTable(ds.Tables("R_Members")))
            End If
            If (Not (ds.Tables("FD_Rup")) Is Nothing) Then
                Me.Tables.Add(New FD_RupDataTable(ds.Tables("FD_Rup")))
            End If
            If (Not (ds.Tables("CASHDIVR")) Is Nothing) Then
                Me.Tables.Add(New CASHDIVRDataTable(ds.Tables("CASHDIVR")))
            End If
            If (Not (ds.Tables("PATREF")) Is Nothing) Then
                Me.Tables.Add(New PATREFDataTable(ds.Tables("PATREF")))
            End If
            If (Not (ds.Tables("PATREFS")) Is Nothing) Then
                Me.Tables.Add(New PATREFSDataTable(ds.Tables("PATREFS")))
            End If
            If (Not (ds.Tables("DIVREFREG")) Is Nothing) Then
                Me.Tables.Add(New DIVREFREGDataTable(ds.Tables("DIVREFREG")))
            End If
            If (Not (ds.Tables("VOUCHER")) Is Nothing) Then
                Me.Tables.Add(New VOUCHERDataTable(ds.Tables("VOUCHER")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FD_Ledger As FD_LedgerDataTable
        Get
            Return Me.tableFD_Ledger
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property D_Tran As D_TranDataTable
        Get
            Return Me.tableD_Tran
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MEM_List As MEM_ListDataTable
        Get
            Return Me.tableMEM_List
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property R_Members As R_MembersDataTable
        Get
            Return Me.tableR_Members
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FD_Rup As FD_RupDataTable
        Get
            Return Me.tableFD_Rup
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CASHDIVR As CASHDIVRDataTable
        Get
            Return Me.tableCASHDIVR
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PATREF As PATREFDataTable
        Get
            Return Me.tablePATREF
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PATREFS As PATREFSDataTable
        Get
            Return Me.tablePATREFS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DIVREFREG As DIVREFREGDataTable
        Get
            Return Me.tableDIVREFREG
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VOUCHER As VOUCHERDataTable
        Get
            Return Me.tableVOUCHER
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dstFD_Member = CType(MyBase.Clone,dstFD_Member)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("FD_Ledger")) Is Nothing) Then
            Me.Tables.Add(New FD_LedgerDataTable(ds.Tables("FD_Ledger")))
        End If
        If (Not (ds.Tables("D_Tran")) Is Nothing) Then
            Me.Tables.Add(New D_TranDataTable(ds.Tables("D_Tran")))
        End If
        If (Not (ds.Tables("MEM_List")) Is Nothing) Then
            Me.Tables.Add(New MEM_ListDataTable(ds.Tables("MEM_List")))
        End If
        If (Not (ds.Tables("R_Members")) Is Nothing) Then
            Me.Tables.Add(New R_MembersDataTable(ds.Tables("R_Members")))
        End If
        If (Not (ds.Tables("FD_Rup")) Is Nothing) Then
            Me.Tables.Add(New FD_RupDataTable(ds.Tables("FD_Rup")))
        End If
        If (Not (ds.Tables("CASHDIVR")) Is Nothing) Then
            Me.Tables.Add(New CASHDIVRDataTable(ds.Tables("CASHDIVR")))
        End If
        If (Not (ds.Tables("PATREF")) Is Nothing) Then
            Me.Tables.Add(New PATREFDataTable(ds.Tables("PATREF")))
        End If
        If (Not (ds.Tables("PATREFS")) Is Nothing) Then
            Me.Tables.Add(New PATREFSDataTable(ds.Tables("PATREFS")))
        End If
        If (Not (ds.Tables("DIVREFREG")) Is Nothing) Then
            Me.Tables.Add(New DIVREFREGDataTable(ds.Tables("DIVREFREG")))
        End If
        If (Not (ds.Tables("VOUCHER")) Is Nothing) Then
            Me.Tables.Add(New VOUCHERDataTable(ds.Tables("VOUCHER")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableFD_Ledger = CType(Me.Tables("FD_Ledger"),FD_LedgerDataTable)
        If (Not (Me.tableFD_Ledger) Is Nothing) Then
            Me.tableFD_Ledger.InitVars
        End If
        Me.tableD_Tran = CType(Me.Tables("D_Tran"),D_TranDataTable)
        If (Not (Me.tableD_Tran) Is Nothing) Then
            Me.tableD_Tran.InitVars
        End If
        Me.tableMEM_List = CType(Me.Tables("MEM_List"),MEM_ListDataTable)
        If (Not (Me.tableMEM_List) Is Nothing) Then
            Me.tableMEM_List.InitVars
        End If
        Me.tableR_Members = CType(Me.Tables("R_Members"),R_MembersDataTable)
        If (Not (Me.tableR_Members) Is Nothing) Then
            Me.tableR_Members.InitVars
        End If
        Me.tableFD_Rup = CType(Me.Tables("FD_Rup"),FD_RupDataTable)
        If (Not (Me.tableFD_Rup) Is Nothing) Then
            Me.tableFD_Rup.InitVars
        End If
        Me.tableCASHDIVR = CType(Me.Tables("CASHDIVR"),CASHDIVRDataTable)
        If (Not (Me.tableCASHDIVR) Is Nothing) Then
            Me.tableCASHDIVR.InitVars
        End If
        Me.tablePATREF = CType(Me.Tables("PATREF"),PATREFDataTable)
        If (Not (Me.tablePATREF) Is Nothing) Then
            Me.tablePATREF.InitVars
        End If
        Me.tablePATREFS = CType(Me.Tables("PATREFS"),PATREFSDataTable)
        If (Not (Me.tablePATREFS) Is Nothing) Then
            Me.tablePATREFS.InitVars
        End If
        Me.tableDIVREFREG = CType(Me.Tables("DIVREFREG"),DIVREFREGDataTable)
        If (Not (Me.tableDIVREFREG) Is Nothing) Then
            Me.tableDIVREFREG.InitVars
        End If
        Me.tableVOUCHER = CType(Me.Tables("VOUCHER"),VOUCHERDataTable)
        If (Not (Me.tableVOUCHER) Is Nothing) Then
            Me.tableVOUCHER.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dstFD_Member"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dstFD_Member.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableFD_Ledger = New FD_LedgerDataTable
        Me.Tables.Add(Me.tableFD_Ledger)
        Me.tableD_Tran = New D_TranDataTable
        Me.Tables.Add(Me.tableD_Tran)
        Me.tableMEM_List = New MEM_ListDataTable
        Me.Tables.Add(Me.tableMEM_List)
        Me.tableR_Members = New R_MembersDataTable
        Me.Tables.Add(Me.tableR_Members)
        Me.tableFD_Rup = New FD_RupDataTable
        Me.Tables.Add(Me.tableFD_Rup)
        Me.tableCASHDIVR = New CASHDIVRDataTable
        Me.Tables.Add(Me.tableCASHDIVR)
        Me.tablePATREF = New PATREFDataTable
        Me.Tables.Add(Me.tablePATREF)
        Me.tablePATREFS = New PATREFSDataTable
        Me.Tables.Add(Me.tablePATREFS)
        Me.tableDIVREFREG = New DIVREFREGDataTable
        Me.Tables.Add(Me.tableDIVREFREG)
        Me.tableVOUCHER = New VOUCHERDataTable
        Me.Tables.Add(Me.tableVOUCHER)
    End Sub
    
    Private Function ShouldSerializeFD_Ledger() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeD_Tran() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMEM_List() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeR_Members() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeFD_Rup() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCASHDIVR() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePATREF() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePATREFS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDIVREFREG() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVOUCHER() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub FD_LedgerRowChangeEventHandler(ByVal sender As Object, ByVal e As FD_LedgerRowChangeEvent)
    
    Public Delegate Sub D_TranRowChangeEventHandler(ByVal sender As Object, ByVal e As D_TranRowChangeEvent)
    
    Public Delegate Sub MEM_ListRowChangeEventHandler(ByVal sender As Object, ByVal e As MEM_ListRowChangeEvent)
    
    Public Delegate Sub R_MembersRowChangeEventHandler(ByVal sender As Object, ByVal e As R_MembersRowChangeEvent)
    
    Public Delegate Sub FD_RupRowChangeEventHandler(ByVal sender As Object, ByVal e As FD_RupRowChangeEvent)
    
    Public Delegate Sub CASHDIVRRowChangeEventHandler(ByVal sender As Object, ByVal e As CASHDIVRRowChangeEvent)
    
    Public Delegate Sub PATREFRowChangeEventHandler(ByVal sender As Object, ByVal e As PATREFRowChangeEvent)
    
    Public Delegate Sub PATREFSRowChangeEventHandler(ByVal sender As Object, ByVal e As PATREFSRowChangeEvent)
    
    Public Delegate Sub DIVREFREGRowChangeEventHandler(ByVal sender As Object, ByVal e As DIVREFREGRowChangeEvent)
    
    Public Delegate Sub VOUCHERRowChangeEventHandler(ByVal sender As Object, ByVal e As VOUCHERRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FD_LedgerDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private column_DATE As DataColumn
        
        Private columnREF As DataColumn
        
        Private columnDEBIT As DataColumn
        
        Private columnCREDIT As DataColumn
        
        Private columnBALANCE As DataColumn
        
        Private columnCODE As DataColumn
        
        Private columnREMARKS As DataColumn
        
        Friend Sub New()
            MyBase.New("FD_Ledger")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property _DATEColumn As DataColumn
            Get
                Return Me.column_DATE
            End Get
        End Property
        
        Friend ReadOnly Property REFColumn As DataColumn
            Get
                Return Me.columnREF
            End Get
        End Property
        
        Friend ReadOnly Property DEBITColumn As DataColumn
            Get
                Return Me.columnDEBIT
            End Get
        End Property
        
        Friend ReadOnly Property CREDITColumn As DataColumn
            Get
                Return Me.columnCREDIT
            End Get
        End Property
        
        Friend ReadOnly Property BALANCEColumn As DataColumn
            Get
                Return Me.columnBALANCE
            End Get
        End Property
        
        Friend ReadOnly Property CODEColumn As DataColumn
            Get
                Return Me.columnCODE
            End Get
        End Property
        
        Friend ReadOnly Property REMARKSColumn As DataColumn
            Get
                Return Me.columnREMARKS
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As FD_LedgerRow
            Get
                Return CType(Me.Rows(index),FD_LedgerRow)
            End Get
        End Property
        
        Public Event FD_LedgerRowChanged As FD_LedgerRowChangeEventHandler
        
        Public Event FD_LedgerRowChanging As FD_LedgerRowChangeEventHandler
        
        Public Event FD_LedgerRowDeleted As FD_LedgerRowChangeEventHandler
        
        Public Event FD_LedgerRowDeleting As FD_LedgerRowChangeEventHandler
        
        Public Overloads Sub AddFD_LedgerRow(ByVal row As FD_LedgerRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddFD_LedgerRow(ByVal _DATE As String, ByVal REF As String, ByVal DEBIT As Decimal, ByVal CREDIT As Decimal, ByVal BALANCE As Decimal, ByVal CODE As String, ByVal REMARKS As String) As FD_LedgerRow
            Dim rowFD_LedgerRow As FD_LedgerRow = CType(Me.NewRow,FD_LedgerRow)
            rowFD_LedgerRow.ItemArray = New Object() {_DATE, REF, DEBIT, CREDIT, BALANCE, CODE, REMARKS}
            Me.Rows.Add(rowFD_LedgerRow)
            Return rowFD_LedgerRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As FD_LedgerDataTable = CType(MyBase.Clone,FD_LedgerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New FD_LedgerDataTable
        End Function
        
        Friend Sub InitVars()
            Me.column_DATE = Me.Columns("DATE")
            Me.columnREF = Me.Columns("REF")
            Me.columnDEBIT = Me.Columns("DEBIT")
            Me.columnCREDIT = Me.Columns("CREDIT")
            Me.columnBALANCE = Me.Columns("BALANCE")
            Me.columnCODE = Me.Columns("CODE")
            Me.columnREMARKS = Me.Columns("REMARKS")
        End Sub
        
        Private Sub InitClass()
            Me.column_DATE = New DataColumn("DATE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_DATE)
            Me.columnREF = New DataColumn("REF", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREF)
            Me.columnDEBIT = New DataColumn("DEBIT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDEBIT)
            Me.columnCREDIT = New DataColumn("CREDIT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCREDIT)
            Me.columnBALANCE = New DataColumn("BALANCE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBALANCE)
            Me.columnCODE = New DataColumn("CODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCODE)
            Me.columnREMARKS = New DataColumn("REMARKS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREMARKS)
            Me.columnREF.AllowDBNull = false
        End Sub
        
        Public Function NewFD_LedgerRow() As FD_LedgerRow
            Return CType(Me.NewRow,FD_LedgerRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New FD_LedgerRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FD_LedgerRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FD_LedgerRowChangedEvent) Is Nothing) Then
                RaiseEvent FD_LedgerRowChanged(Me, New FD_LedgerRowChangeEvent(CType(e.Row,FD_LedgerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FD_LedgerRowChangingEvent) Is Nothing) Then
                RaiseEvent FD_LedgerRowChanging(Me, New FD_LedgerRowChangeEvent(CType(e.Row,FD_LedgerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FD_LedgerRowDeletedEvent) Is Nothing) Then
                RaiseEvent FD_LedgerRowDeleted(Me, New FD_LedgerRowChangeEvent(CType(e.Row,FD_LedgerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FD_LedgerRowDeletingEvent) Is Nothing) Then
                RaiseEvent FD_LedgerRowDeleting(Me, New FD_LedgerRowChangeEvent(CType(e.Row,FD_LedgerRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveFD_LedgerRow(ByVal row As FD_LedgerRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FD_LedgerRow
        Inherits DataRow
        
        Private tableFD_Ledger As FD_LedgerDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableFD_Ledger = CType(Me.Table,FD_LedgerDataTable)
        End Sub
        
        Public Property _DATE As String
            Get
                Try 
                    Return CType(Me(Me.tableFD_Ledger._DATEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFD_Ledger._DATEColumn) = value
            End Set
        End Property
        
        Public Property REF As String
            Get
                Return CType(Me(Me.tableFD_Ledger.REFColumn),String)
            End Get
            Set
                Me(Me.tableFD_Ledger.REFColumn) = value
            End Set
        End Property
        
        Public Property DEBIT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFD_Ledger.DEBITColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFD_Ledger.DEBITColumn) = value
            End Set
        End Property
        
        Public Property CREDIT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFD_Ledger.CREDITColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFD_Ledger.CREDITColumn) = value
            End Set
        End Property
        
        Public Property BALANCE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFD_Ledger.BALANCEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFD_Ledger.BALANCEColumn) = value
            End Set
        End Property
        
        Public Property CODE As String
            Get
                Try 
                    Return CType(Me(Me.tableFD_Ledger.CODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFD_Ledger.CODEColumn) = value
            End Set
        End Property
        
        Public Property REMARKS As String
            Get
                Try 
                    Return CType(Me(Me.tableFD_Ledger.REMARKSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFD_Ledger.REMARKSColumn) = value
            End Set
        End Property
        
        Public Function Is_DATENull() As Boolean
            Return Me.IsNull(Me.tableFD_Ledger._DATEColumn)
        End Function
        
        Public Sub Set_DATENull()
            Me(Me.tableFD_Ledger._DATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDEBITNull() As Boolean
            Return Me.IsNull(Me.tableFD_Ledger.DEBITColumn)
        End Function
        
        Public Sub SetDEBITNull()
            Me(Me.tableFD_Ledger.DEBITColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCREDITNull() As Boolean
            Return Me.IsNull(Me.tableFD_Ledger.CREDITColumn)
        End Function
        
        Public Sub SetCREDITNull()
            Me(Me.tableFD_Ledger.CREDITColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBALANCENull() As Boolean
            Return Me.IsNull(Me.tableFD_Ledger.BALANCEColumn)
        End Function
        
        Public Sub SetBALANCENull()
            Me(Me.tableFD_Ledger.BALANCEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCODENull() As Boolean
            Return Me.IsNull(Me.tableFD_Ledger.CODEColumn)
        End Function
        
        Public Sub SetCODENull()
            Me(Me.tableFD_Ledger.CODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsREMARKSNull() As Boolean
            Return Me.IsNull(Me.tableFD_Ledger.REMARKSColumn)
        End Function
        
        Public Sub SetREMARKSNull()
            Me(Me.tableFD_Ledger.REMARKSColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FD_LedgerRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As FD_LedgerRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As FD_LedgerRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As FD_LedgerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class D_TranDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnKBCI_NO As DataColumn
        
        Private columnNAME As DataColumn
        
        Private columnCODE As DataColumn
        
        Private columnDEBIT As DataColumn
        
        Private columnCREDIT As DataColumn
        
        Private columnBALANCE As DataColumn
        
        Private columnREF As DataColumn
        
        Private columnRMK As DataColumn
        
        Friend Sub New()
            MyBase.New("D_Tran")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property KBCI_NOColumn As DataColumn
            Get
                Return Me.columnKBCI_NO
            End Get
        End Property
        
        Friend ReadOnly Property NAMEColumn As DataColumn
            Get
                Return Me.columnNAME
            End Get
        End Property
        
        Friend ReadOnly Property CODEColumn As DataColumn
            Get
                Return Me.columnCODE
            End Get
        End Property
        
        Friend ReadOnly Property DEBITColumn As DataColumn
            Get
                Return Me.columnDEBIT
            End Get
        End Property
        
        Friend ReadOnly Property CREDITColumn As DataColumn
            Get
                Return Me.columnCREDIT
            End Get
        End Property
        
        Friend ReadOnly Property BALANCEColumn As DataColumn
            Get
                Return Me.columnBALANCE
            End Get
        End Property
        
        Friend ReadOnly Property REFColumn As DataColumn
            Get
                Return Me.columnREF
            End Get
        End Property
        
        Friend ReadOnly Property RMKColumn As DataColumn
            Get
                Return Me.columnRMK
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As D_TranRow
            Get
                Return CType(Me.Rows(index),D_TranRow)
            End Get
        End Property
        
        Public Event D_TranRowChanged As D_TranRowChangeEventHandler
        
        Public Event D_TranRowChanging As D_TranRowChangeEventHandler
        
        Public Event D_TranRowDeleted As D_TranRowChangeEventHandler
        
        Public Event D_TranRowDeleting As D_TranRowChangeEventHandler
        
        Public Overloads Sub AddD_TranRow(ByVal row As D_TranRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddD_TranRow(ByVal KBCI_NO As String, ByVal NAME As String, ByVal CODE As String, ByVal DEBIT As Decimal, ByVal CREDIT As Decimal, ByVal BALANCE As Decimal, ByVal REF As String, ByVal RMK As String) As D_TranRow
            Dim rowD_TranRow As D_TranRow = CType(Me.NewRow,D_TranRow)
            rowD_TranRow.ItemArray = New Object() {KBCI_NO, NAME, CODE, DEBIT, CREDIT, BALANCE, REF, RMK}
            Me.Rows.Add(rowD_TranRow)
            Return rowD_TranRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As D_TranDataTable = CType(MyBase.Clone,D_TranDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New D_TranDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnKBCI_NO = Me.Columns("KBCI_NO")
            Me.columnNAME = Me.Columns("NAME")
            Me.columnCODE = Me.Columns("CODE")
            Me.columnDEBIT = Me.Columns("DEBIT")
            Me.columnCREDIT = Me.Columns("CREDIT")
            Me.columnBALANCE = Me.Columns("BALANCE")
            Me.columnREF = Me.Columns("REF")
            Me.columnRMK = Me.Columns("RMK")
        End Sub
        
        Private Sub InitClass()
            Me.columnKBCI_NO = New DataColumn("KBCI_NO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKBCI_NO)
            Me.columnNAME = New DataColumn("NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNAME)
            Me.columnCODE = New DataColumn("CODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCODE)
            Me.columnDEBIT = New DataColumn("DEBIT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDEBIT)
            Me.columnCREDIT = New DataColumn("CREDIT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCREDIT)
            Me.columnBALANCE = New DataColumn("BALANCE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBALANCE)
            Me.columnREF = New DataColumn("REF", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREF)
            Me.columnRMK = New DataColumn("RMK", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRMK)
        End Sub
        
        Public Function NewD_TranRow() As D_TranRow
            Return CType(Me.NewRow,D_TranRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New D_TranRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(D_TranRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.D_TranRowChangedEvent) Is Nothing) Then
                RaiseEvent D_TranRowChanged(Me, New D_TranRowChangeEvent(CType(e.Row,D_TranRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.D_TranRowChangingEvent) Is Nothing) Then
                RaiseEvent D_TranRowChanging(Me, New D_TranRowChangeEvent(CType(e.Row,D_TranRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.D_TranRowDeletedEvent) Is Nothing) Then
                RaiseEvent D_TranRowDeleted(Me, New D_TranRowChangeEvent(CType(e.Row,D_TranRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.D_TranRowDeletingEvent) Is Nothing) Then
                RaiseEvent D_TranRowDeleting(Me, New D_TranRowChangeEvent(CType(e.Row,D_TranRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveD_TranRow(ByVal row As D_TranRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class D_TranRow
        Inherits DataRow
        
        Private tableD_Tran As D_TranDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableD_Tran = CType(Me.Table,D_TranDataTable)
        End Sub
        
        Public Property KBCI_NO As String
            Get
                Try 
                    Return CType(Me(Me.tableD_Tran.KBCI_NOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableD_Tran.KBCI_NOColumn) = value
            End Set
        End Property
        
        Public Property NAME As String
            Get
                Try 
                    Return CType(Me(Me.tableD_Tran.NAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableD_Tran.NAMEColumn) = value
            End Set
        End Property
        
        Public Property CODE As String
            Get
                Try 
                    Return CType(Me(Me.tableD_Tran.CODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableD_Tran.CODEColumn) = value
            End Set
        End Property
        
        Public Property DEBIT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableD_Tran.DEBITColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableD_Tran.DEBITColumn) = value
            End Set
        End Property
        
        Public Property CREDIT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableD_Tran.CREDITColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableD_Tran.CREDITColumn) = value
            End Set
        End Property
        
        Public Property BALANCE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableD_Tran.BALANCEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableD_Tran.BALANCEColumn) = value
            End Set
        End Property
        
        Public Property REF As String
            Get
                Try 
                    Return CType(Me(Me.tableD_Tran.REFColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableD_Tran.REFColumn) = value
            End Set
        End Property
        
        Public Property RMK As String
            Get
                Try 
                    Return CType(Me(Me.tableD_Tran.RMKColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableD_Tran.RMKColumn) = value
            End Set
        End Property
        
        Public Function IsKBCI_NONull() As Boolean
            Return Me.IsNull(Me.tableD_Tran.KBCI_NOColumn)
        End Function
        
        Public Sub SetKBCI_NONull()
            Me(Me.tableD_Tran.KBCI_NOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNAMENull() As Boolean
            Return Me.IsNull(Me.tableD_Tran.NAMEColumn)
        End Function
        
        Public Sub SetNAMENull()
            Me(Me.tableD_Tran.NAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCODENull() As Boolean
            Return Me.IsNull(Me.tableD_Tran.CODEColumn)
        End Function
        
        Public Sub SetCODENull()
            Me(Me.tableD_Tran.CODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDEBITNull() As Boolean
            Return Me.IsNull(Me.tableD_Tran.DEBITColumn)
        End Function
        
        Public Sub SetDEBITNull()
            Me(Me.tableD_Tran.DEBITColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCREDITNull() As Boolean
            Return Me.IsNull(Me.tableD_Tran.CREDITColumn)
        End Function
        
        Public Sub SetCREDITNull()
            Me(Me.tableD_Tran.CREDITColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBALANCENull() As Boolean
            Return Me.IsNull(Me.tableD_Tran.BALANCEColumn)
        End Function
        
        Public Sub SetBALANCENull()
            Me(Me.tableD_Tran.BALANCEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsREFNull() As Boolean
            Return Me.IsNull(Me.tableD_Tran.REFColumn)
        End Function
        
        Public Sub SetREFNull()
            Me(Me.tableD_Tran.REFColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRMKNull() As Boolean
            Return Me.IsNull(Me.tableD_Tran.RMKColumn)
        End Function
        
        Public Sub SetRMKNull()
            Me(Me.tableD_Tran.RMKColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class D_TranRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As D_TranRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As D_TranRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As D_TranRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MEM_ListDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnKBCI_NO As DataColumn
        
        Private columnNAME As DataColumn
        
        Private columnMEM_ADDR As DataColumn
        
        Private columnMEM_CODE As DataColumn
        
        Private columnMEM_STAT As DataColumn
        
        Private columnDORI As DataColumn
        
        Private columnREA_DORI As DataColumn
        
        Private columnFEBTC_SA As DataColumn
        
        Private columnCB_EMPNO As DataColumn
        
        Private columnCB_HIRE As DataColumn
        
        Private column_REGION As DataColumn
        
        Private columnDEPT As DataColumn
        
        Private columnPOSITION As DataColumn
        
        Private columnOFF_TEL As DataColumn
        
        Private columnRES_TEL As DataColumn
        
        Private columnSAL_BAS As DataColumn
        
        Private columnSAL_ALL As DataColumn
        
        Private columnOTH_INC As DataColumn
        
        Private columnSEX As DataColumn
        
        Private columnCIV_STAT As DataColumn
        
        Private columnNO_DEPEND As DataColumn
        
        Private columnB_DATE As DataColumn
        
        Private columnSP_NAME As DataColumn
        
        Private columnSP_EMPLOY As DataColumn
        
        Private columnSP_CBEMPNO As DataColumn
        
        Private columnSP_OFFTEL As DataColumn
        
        Private columnSP_SALARY As DataColumn
        
        Friend Sub New()
            MyBase.New("MEM_List")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property KBCI_NOColumn As DataColumn
            Get
                Return Me.columnKBCI_NO
            End Get
        End Property
        
        Friend ReadOnly Property NAMEColumn As DataColumn
            Get
                Return Me.columnNAME
            End Get
        End Property
        
        Friend ReadOnly Property MEM_ADDRColumn As DataColumn
            Get
                Return Me.columnMEM_ADDR
            End Get
        End Property
        
        Friend ReadOnly Property MEM_CODEColumn As DataColumn
            Get
                Return Me.columnMEM_CODE
            End Get
        End Property
        
        Friend ReadOnly Property MEM_STATColumn As DataColumn
            Get
                Return Me.columnMEM_STAT
            End Get
        End Property
        
        Friend ReadOnly Property DORIColumn As DataColumn
            Get
                Return Me.columnDORI
            End Get
        End Property
        
        Friend ReadOnly Property REA_DORIColumn As DataColumn
            Get
                Return Me.columnREA_DORI
            End Get
        End Property
        
        Friend ReadOnly Property FEBTC_SAColumn As DataColumn
            Get
                Return Me.columnFEBTC_SA
            End Get
        End Property
        
        Friend ReadOnly Property CB_EMPNOColumn As DataColumn
            Get
                Return Me.columnCB_EMPNO
            End Get
        End Property
        
        Friend ReadOnly Property CB_HIREColumn As DataColumn
            Get
                Return Me.columnCB_HIRE
            End Get
        End Property
        
        Friend ReadOnly Property _REGIONColumn As DataColumn
            Get
                Return Me.column_REGION
            End Get
        End Property
        
        Friend ReadOnly Property DEPTColumn As DataColumn
            Get
                Return Me.columnDEPT
            End Get
        End Property
        
        Friend ReadOnly Property POSITIONColumn As DataColumn
            Get
                Return Me.columnPOSITION
            End Get
        End Property
        
        Friend ReadOnly Property OFF_TELColumn As DataColumn
            Get
                Return Me.columnOFF_TEL
            End Get
        End Property
        
        Friend ReadOnly Property RES_TELColumn As DataColumn
            Get
                Return Me.columnRES_TEL
            End Get
        End Property
        
        Friend ReadOnly Property SAL_BASColumn As DataColumn
            Get
                Return Me.columnSAL_BAS
            End Get
        End Property
        
        Friend ReadOnly Property SAL_ALLColumn As DataColumn
            Get
                Return Me.columnSAL_ALL
            End Get
        End Property
        
        Friend ReadOnly Property OTH_INCColumn As DataColumn
            Get
                Return Me.columnOTH_INC
            End Get
        End Property
        
        Friend ReadOnly Property SEXColumn As DataColumn
            Get
                Return Me.columnSEX
            End Get
        End Property
        
        Friend ReadOnly Property CIV_STATColumn As DataColumn
            Get
                Return Me.columnCIV_STAT
            End Get
        End Property
        
        Friend ReadOnly Property NO_DEPENDColumn As DataColumn
            Get
                Return Me.columnNO_DEPEND
            End Get
        End Property
        
        Friend ReadOnly Property B_DATEColumn As DataColumn
            Get
                Return Me.columnB_DATE
            End Get
        End Property
        
        Friend ReadOnly Property SP_NAMEColumn As DataColumn
            Get
                Return Me.columnSP_NAME
            End Get
        End Property
        
        Friend ReadOnly Property SP_EMPLOYColumn As DataColumn
            Get
                Return Me.columnSP_EMPLOY
            End Get
        End Property
        
        Friend ReadOnly Property SP_CBEMPNOColumn As DataColumn
            Get
                Return Me.columnSP_CBEMPNO
            End Get
        End Property
        
        Friend ReadOnly Property SP_OFFTELColumn As DataColumn
            Get
                Return Me.columnSP_OFFTEL
            End Get
        End Property
        
        Friend ReadOnly Property SP_SALARYColumn As DataColumn
            Get
                Return Me.columnSP_SALARY
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MEM_ListRow
            Get
                Return CType(Me.Rows(index),MEM_ListRow)
            End Get
        End Property
        
        Public Event MEM_ListRowChanged As MEM_ListRowChangeEventHandler
        
        Public Event MEM_ListRowChanging As MEM_ListRowChangeEventHandler
        
        Public Event MEM_ListRowDeleted As MEM_ListRowChangeEventHandler
        
        Public Event MEM_ListRowDeleting As MEM_ListRowChangeEventHandler
        
        Public Overloads Sub AddMEM_ListRow(ByVal row As MEM_ListRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMEM_ListRow( _
                    ByVal KBCI_NO As String,  _
                    ByVal NAME As String,  _
                    ByVal MEM_ADDR As String,  _
                    ByVal MEM_CODE As String,  _
                    ByVal MEM_STAT As String,  _
                    ByVal DORI As String,  _
                    ByVal REA_DORI As String,  _
                    ByVal FEBTC_SA As String,  _
                    ByVal CB_EMPNO As String,  _
                    ByVal CB_HIRE As String,  _
                    ByVal _REGION As String,  _
                    ByVal DEPT As String,  _
                    ByVal POSITION As String,  _
                    ByVal OFF_TEL As String,  _
                    ByVal RES_TEL As String,  _
                    ByVal SAL_BAS As Decimal,  _
                    ByVal SAL_ALL As Decimal,  _
                    ByVal OTH_INC As Decimal,  _
                    ByVal SEX As String,  _
                    ByVal CIV_STAT As String,  _
                    ByVal NO_DEPEND As String,  _
                    ByVal B_DATE As String,  _
                    ByVal SP_NAME As String,  _
                    ByVal SP_EMPLOY As String,  _
                    ByVal SP_CBEMPNO As String,  _
                    ByVal SP_OFFTEL As String,  _
                    ByVal SP_SALARY As Decimal) As MEM_ListRow
            Dim rowMEM_ListRow As MEM_ListRow = CType(Me.NewRow,MEM_ListRow)
            rowMEM_ListRow.ItemArray = New Object() {KBCI_NO, NAME, MEM_ADDR, MEM_CODE, MEM_STAT, DORI, REA_DORI, FEBTC_SA, CB_EMPNO, CB_HIRE, _REGION, DEPT, POSITION, OFF_TEL, RES_TEL, SAL_BAS, SAL_ALL, OTH_INC, SEX, CIV_STAT, NO_DEPEND, B_DATE, SP_NAME, SP_EMPLOY, SP_CBEMPNO, SP_OFFTEL, SP_SALARY}
            Me.Rows.Add(rowMEM_ListRow)
            Return rowMEM_ListRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MEM_ListDataTable = CType(MyBase.Clone,MEM_ListDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MEM_ListDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnKBCI_NO = Me.Columns("KBCI_NO")
            Me.columnNAME = Me.Columns("NAME")
            Me.columnMEM_ADDR = Me.Columns("MEM_ADDR")
            Me.columnMEM_CODE = Me.Columns("MEM_CODE")
            Me.columnMEM_STAT = Me.Columns("MEM_STAT")
            Me.columnDORI = Me.Columns("DORI")
            Me.columnREA_DORI = Me.Columns("REA_DORI")
            Me.columnFEBTC_SA = Me.Columns("FEBTC_SA")
            Me.columnCB_EMPNO = Me.Columns("CB_EMPNO")
            Me.columnCB_HIRE = Me.Columns("CB_HIRE")
            Me.column_REGION = Me.Columns("REGION")
            Me.columnDEPT = Me.Columns("DEPT")
            Me.columnPOSITION = Me.Columns("POSITION")
            Me.columnOFF_TEL = Me.Columns("OFF_TEL")
            Me.columnRES_TEL = Me.Columns("RES_TEL")
            Me.columnSAL_BAS = Me.Columns("SAL_BAS")
            Me.columnSAL_ALL = Me.Columns("SAL_ALL")
            Me.columnOTH_INC = Me.Columns("OTH_INC")
            Me.columnSEX = Me.Columns("SEX")
            Me.columnCIV_STAT = Me.Columns("CIV_STAT")
            Me.columnNO_DEPEND = Me.Columns("NO_DEPEND")
            Me.columnB_DATE = Me.Columns("B_DATE")
            Me.columnSP_NAME = Me.Columns("SP_NAME")
            Me.columnSP_EMPLOY = Me.Columns("SP_EMPLOY")
            Me.columnSP_CBEMPNO = Me.Columns("SP_CBEMPNO")
            Me.columnSP_OFFTEL = Me.Columns("SP_OFFTEL")
            Me.columnSP_SALARY = Me.Columns("SP_SALARY")
        End Sub
        
        Private Sub InitClass()
            Me.columnKBCI_NO = New DataColumn("KBCI_NO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKBCI_NO)
            Me.columnNAME = New DataColumn("NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNAME)
            Me.columnMEM_ADDR = New DataColumn("MEM_ADDR", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_ADDR)
            Me.columnMEM_CODE = New DataColumn("MEM_CODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_CODE)
            Me.columnMEM_STAT = New DataColumn("MEM_STAT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_STAT)
            Me.columnDORI = New DataColumn("DORI", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDORI)
            Me.columnREA_DORI = New DataColumn("REA_DORI", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREA_DORI)
            Me.columnFEBTC_SA = New DataColumn("FEBTC_SA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFEBTC_SA)
            Me.columnCB_EMPNO = New DataColumn("CB_EMPNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCB_EMPNO)
            Me.columnCB_HIRE = New DataColumn("CB_HIRE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCB_HIRE)
            Me.column_REGION = New DataColumn("REGION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_REGION)
            Me.columnDEPT = New DataColumn("DEPT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDEPT)
            Me.columnPOSITION = New DataColumn("POSITION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPOSITION)
            Me.columnOFF_TEL = New DataColumn("OFF_TEL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOFF_TEL)
            Me.columnRES_TEL = New DataColumn("RES_TEL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRES_TEL)
            Me.columnSAL_BAS = New DataColumn("SAL_BAS", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSAL_BAS)
            Me.columnSAL_ALL = New DataColumn("SAL_ALL", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSAL_ALL)
            Me.columnOTH_INC = New DataColumn("OTH_INC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOTH_INC)
            Me.columnSEX = New DataColumn("SEX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSEX)
            Me.columnCIV_STAT = New DataColumn("CIV_STAT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCIV_STAT)
            Me.columnNO_DEPEND = New DataColumn("NO_DEPEND", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNO_DEPEND)
            Me.columnB_DATE = New DataColumn("B_DATE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnB_DATE)
            Me.columnSP_NAME = New DataColumn("SP_NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSP_NAME)
            Me.columnSP_EMPLOY = New DataColumn("SP_EMPLOY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSP_EMPLOY)
            Me.columnSP_CBEMPNO = New DataColumn("SP_CBEMPNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSP_CBEMPNO)
            Me.columnSP_OFFTEL = New DataColumn("SP_OFFTEL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSP_OFFTEL)
            Me.columnSP_SALARY = New DataColumn("SP_SALARY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSP_SALARY)
        End Sub
        
        Public Function NewMEM_ListRow() As MEM_ListRow
            Return CType(Me.NewRow,MEM_ListRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MEM_ListRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MEM_ListRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MEM_ListRowChangedEvent) Is Nothing) Then
                RaiseEvent MEM_ListRowChanged(Me, New MEM_ListRowChangeEvent(CType(e.Row,MEM_ListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MEM_ListRowChangingEvent) Is Nothing) Then
                RaiseEvent MEM_ListRowChanging(Me, New MEM_ListRowChangeEvent(CType(e.Row,MEM_ListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MEM_ListRowDeletedEvent) Is Nothing) Then
                RaiseEvent MEM_ListRowDeleted(Me, New MEM_ListRowChangeEvent(CType(e.Row,MEM_ListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MEM_ListRowDeletingEvent) Is Nothing) Then
                RaiseEvent MEM_ListRowDeleting(Me, New MEM_ListRowChangeEvent(CType(e.Row,MEM_ListRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMEM_ListRow(ByVal row As MEM_ListRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MEM_ListRow
        Inherits DataRow
        
        Private tableMEM_List As MEM_ListDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMEM_List = CType(Me.Table,MEM_ListDataTable)
        End Sub
        
        Public Property KBCI_NO As String
            Get
                Try 
                    Return CType(Me(Me.tableMEM_List.KBCI_NOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEM_List.KBCI_NOColumn) = value
            End Set
        End Property
        
        Public Property NAME As String
            Get
                Try 
                    Return CType(Me(Me.tableMEM_List.NAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEM_List.NAMEColumn) = value
            End Set
        End Property
        
        Public Property MEM_ADDR As String
            Get
                Try 
                    Return CType(Me(Me.tableMEM_List.MEM_ADDRColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEM_List.MEM_ADDRColumn) = value
            End Set
        End Property
        
        Public Property MEM_CODE As String
            Get
                Try 
                    Return CType(Me(Me.tableMEM_List.MEM_CODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEM_List.MEM_CODEColumn) = value
            End Set
        End Property
        
        Public Property MEM_STAT As String
            Get
                Try 
                    Return CType(Me(Me.tableMEM_List.MEM_STATColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEM_List.MEM_STATColumn) = value
            End Set
        End Property
        
        Public Property DORI As String
            Get
                Try 
                    Return CType(Me(Me.tableMEM_List.DORIColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEM_List.DORIColumn) = value
            End Set
        End Property
        
        Public Property REA_DORI As String
            Get
                Try 
                    Return CType(Me(Me.tableMEM_List.REA_DORIColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEM_List.REA_DORIColumn) = value
            End Set
        End Property
        
        Public Property FEBTC_SA As String
            Get
                Try 
                    Return CType(Me(Me.tableMEM_List.FEBTC_SAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEM_List.FEBTC_SAColumn) = value
            End Set
        End Property
        
        Public Property CB_EMPNO As String
            Get
                Try 
                    Return CType(Me(Me.tableMEM_List.CB_EMPNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEM_List.CB_EMPNOColumn) = value
            End Set
        End Property
        
        Public Property CB_HIRE As String
            Get
                Try 
                    Return CType(Me(Me.tableMEM_List.CB_HIREColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEM_List.CB_HIREColumn) = value
            End Set
        End Property
        
        Public Property _REGION As String
            Get
                Try 
                    Return CType(Me(Me.tableMEM_List._REGIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEM_List._REGIONColumn) = value
            End Set
        End Property
        
        Public Property DEPT As String
            Get
                Try 
                    Return CType(Me(Me.tableMEM_List.DEPTColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEM_List.DEPTColumn) = value
            End Set
        End Property
        
        Public Property POSITION As String
            Get
                Try 
                    Return CType(Me(Me.tableMEM_List.POSITIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEM_List.POSITIONColumn) = value
            End Set
        End Property
        
        Public Property OFF_TEL As String
            Get
                Try 
                    Return CType(Me(Me.tableMEM_List.OFF_TELColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEM_List.OFF_TELColumn) = value
            End Set
        End Property
        
        Public Property RES_TEL As String
            Get
                Try 
                    Return CType(Me(Me.tableMEM_List.RES_TELColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEM_List.RES_TELColumn) = value
            End Set
        End Property
        
        Public Property SAL_BAS As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMEM_List.SAL_BASColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEM_List.SAL_BASColumn) = value
            End Set
        End Property
        
        Public Property SAL_ALL As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMEM_List.SAL_ALLColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEM_List.SAL_ALLColumn) = value
            End Set
        End Property
        
        Public Property OTH_INC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMEM_List.OTH_INCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEM_List.OTH_INCColumn) = value
            End Set
        End Property
        
        Public Property SEX As String
            Get
                Try 
                    Return CType(Me(Me.tableMEM_List.SEXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEM_List.SEXColumn) = value
            End Set
        End Property
        
        Public Property CIV_STAT As String
            Get
                Try 
                    Return CType(Me(Me.tableMEM_List.CIV_STATColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEM_List.CIV_STATColumn) = value
            End Set
        End Property
        
        Public Property NO_DEPEND As String
            Get
                Try 
                    Return CType(Me(Me.tableMEM_List.NO_DEPENDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEM_List.NO_DEPENDColumn) = value
            End Set
        End Property
        
        Public Property B_DATE As String
            Get
                Try 
                    Return CType(Me(Me.tableMEM_List.B_DATEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEM_List.B_DATEColumn) = value
            End Set
        End Property
        
        Public Property SP_NAME As String
            Get
                Try 
                    Return CType(Me(Me.tableMEM_List.SP_NAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEM_List.SP_NAMEColumn) = value
            End Set
        End Property
        
        Public Property SP_EMPLOY As String
            Get
                Try 
                    Return CType(Me(Me.tableMEM_List.SP_EMPLOYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEM_List.SP_EMPLOYColumn) = value
            End Set
        End Property
        
        Public Property SP_CBEMPNO As String
            Get
                Try 
                    Return CType(Me(Me.tableMEM_List.SP_CBEMPNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEM_List.SP_CBEMPNOColumn) = value
            End Set
        End Property
        
        Public Property SP_OFFTEL As String
            Get
                Try 
                    Return CType(Me(Me.tableMEM_List.SP_OFFTELColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEM_List.SP_OFFTELColumn) = value
            End Set
        End Property
        
        Public Property SP_SALARY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMEM_List.SP_SALARYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEM_List.SP_SALARYColumn) = value
            End Set
        End Property
        
        Public Function IsKBCI_NONull() As Boolean
            Return Me.IsNull(Me.tableMEM_List.KBCI_NOColumn)
        End Function
        
        Public Sub SetKBCI_NONull()
            Me(Me.tableMEM_List.KBCI_NOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNAMENull() As Boolean
            Return Me.IsNull(Me.tableMEM_List.NAMEColumn)
        End Function
        
        Public Sub SetNAMENull()
            Me(Me.tableMEM_List.NAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_ADDRNull() As Boolean
            Return Me.IsNull(Me.tableMEM_List.MEM_ADDRColumn)
        End Function
        
        Public Sub SetMEM_ADDRNull()
            Me(Me.tableMEM_List.MEM_ADDRColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_CODENull() As Boolean
            Return Me.IsNull(Me.tableMEM_List.MEM_CODEColumn)
        End Function
        
        Public Sub SetMEM_CODENull()
            Me(Me.tableMEM_List.MEM_CODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_STATNull() As Boolean
            Return Me.IsNull(Me.tableMEM_List.MEM_STATColumn)
        End Function
        
        Public Sub SetMEM_STATNull()
            Me(Me.tableMEM_List.MEM_STATColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDORINull() As Boolean
            Return Me.IsNull(Me.tableMEM_List.DORIColumn)
        End Function
        
        Public Sub SetDORINull()
            Me(Me.tableMEM_List.DORIColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsREA_DORINull() As Boolean
            Return Me.IsNull(Me.tableMEM_List.REA_DORIColumn)
        End Function
        
        Public Sub SetREA_DORINull()
            Me(Me.tableMEM_List.REA_DORIColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFEBTC_SANull() As Boolean
            Return Me.IsNull(Me.tableMEM_List.FEBTC_SAColumn)
        End Function
        
        Public Sub SetFEBTC_SANull()
            Me(Me.tableMEM_List.FEBTC_SAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCB_EMPNONull() As Boolean
            Return Me.IsNull(Me.tableMEM_List.CB_EMPNOColumn)
        End Function
        
        Public Sub SetCB_EMPNONull()
            Me(Me.tableMEM_List.CB_EMPNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCB_HIRENull() As Boolean
            Return Me.IsNull(Me.tableMEM_List.CB_HIREColumn)
        End Function
        
        Public Sub SetCB_HIRENull()
            Me(Me.tableMEM_List.CB_HIREColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_REGIONNull() As Boolean
            Return Me.IsNull(Me.tableMEM_List._REGIONColumn)
        End Function
        
        Public Sub Set_REGIONNull()
            Me(Me.tableMEM_List._REGIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDEPTNull() As Boolean
            Return Me.IsNull(Me.tableMEM_List.DEPTColumn)
        End Function
        
        Public Sub SetDEPTNull()
            Me(Me.tableMEM_List.DEPTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPOSITIONNull() As Boolean
            Return Me.IsNull(Me.tableMEM_List.POSITIONColumn)
        End Function
        
        Public Sub SetPOSITIONNull()
            Me(Me.tableMEM_List.POSITIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOFF_TELNull() As Boolean
            Return Me.IsNull(Me.tableMEM_List.OFF_TELColumn)
        End Function
        
        Public Sub SetOFF_TELNull()
            Me(Me.tableMEM_List.OFF_TELColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRES_TELNull() As Boolean
            Return Me.IsNull(Me.tableMEM_List.RES_TELColumn)
        End Function
        
        Public Sub SetRES_TELNull()
            Me(Me.tableMEM_List.RES_TELColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSAL_BASNull() As Boolean
            Return Me.IsNull(Me.tableMEM_List.SAL_BASColumn)
        End Function
        
        Public Sub SetSAL_BASNull()
            Me(Me.tableMEM_List.SAL_BASColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSAL_ALLNull() As Boolean
            Return Me.IsNull(Me.tableMEM_List.SAL_ALLColumn)
        End Function
        
        Public Sub SetSAL_ALLNull()
            Me(Me.tableMEM_List.SAL_ALLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOTH_INCNull() As Boolean
            Return Me.IsNull(Me.tableMEM_List.OTH_INCColumn)
        End Function
        
        Public Sub SetOTH_INCNull()
            Me(Me.tableMEM_List.OTH_INCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSEXNull() As Boolean
            Return Me.IsNull(Me.tableMEM_List.SEXColumn)
        End Function
        
        Public Sub SetSEXNull()
            Me(Me.tableMEM_List.SEXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCIV_STATNull() As Boolean
            Return Me.IsNull(Me.tableMEM_List.CIV_STATColumn)
        End Function
        
        Public Sub SetCIV_STATNull()
            Me(Me.tableMEM_List.CIV_STATColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNO_DEPENDNull() As Boolean
            Return Me.IsNull(Me.tableMEM_List.NO_DEPENDColumn)
        End Function
        
        Public Sub SetNO_DEPENDNull()
            Me(Me.tableMEM_List.NO_DEPENDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsB_DATENull() As Boolean
            Return Me.IsNull(Me.tableMEM_List.B_DATEColumn)
        End Function
        
        Public Sub SetB_DATENull()
            Me(Me.tableMEM_List.B_DATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSP_NAMENull() As Boolean
            Return Me.IsNull(Me.tableMEM_List.SP_NAMEColumn)
        End Function
        
        Public Sub SetSP_NAMENull()
            Me(Me.tableMEM_List.SP_NAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSP_EMPLOYNull() As Boolean
            Return Me.IsNull(Me.tableMEM_List.SP_EMPLOYColumn)
        End Function
        
        Public Sub SetSP_EMPLOYNull()
            Me(Me.tableMEM_List.SP_EMPLOYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSP_CBEMPNONull() As Boolean
            Return Me.IsNull(Me.tableMEM_List.SP_CBEMPNOColumn)
        End Function
        
        Public Sub SetSP_CBEMPNONull()
            Me(Me.tableMEM_List.SP_CBEMPNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSP_OFFTELNull() As Boolean
            Return Me.IsNull(Me.tableMEM_List.SP_OFFTELColumn)
        End Function
        
        Public Sub SetSP_OFFTELNull()
            Me(Me.tableMEM_List.SP_OFFTELColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSP_SALARYNull() As Boolean
            Return Me.IsNull(Me.tableMEM_List.SP_SALARYColumn)
        End Function
        
        Public Sub SetSP_SALARYNull()
            Me(Me.tableMEM_List.SP_SALARYColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MEM_ListRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MEM_ListRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MEM_ListRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MEM_ListRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class R_MembersDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnKBCI_NO As DataColumn
        
        Private columnNAME As DataColumn
        
        Private columnMEM_STAT As DataColumn
        
        Private columnCHG_DATE As DataColumn
        
        Private columnFD_AMOUNT As DataColumn
        
        Friend Sub New()
            MyBase.New("R_Members")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property KBCI_NOColumn As DataColumn
            Get
                Return Me.columnKBCI_NO
            End Get
        End Property
        
        Friend ReadOnly Property NAMEColumn As DataColumn
            Get
                Return Me.columnNAME
            End Get
        End Property
        
        Friend ReadOnly Property MEM_STATColumn As DataColumn
            Get
                Return Me.columnMEM_STAT
            End Get
        End Property
        
        Friend ReadOnly Property CHG_DATEColumn As DataColumn
            Get
                Return Me.columnCHG_DATE
            End Get
        End Property
        
        Friend ReadOnly Property FD_AMOUNTColumn As DataColumn
            Get
                Return Me.columnFD_AMOUNT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As R_MembersRow
            Get
                Return CType(Me.Rows(index),R_MembersRow)
            End Get
        End Property
        
        Public Event R_MembersRowChanged As R_MembersRowChangeEventHandler
        
        Public Event R_MembersRowChanging As R_MembersRowChangeEventHandler
        
        Public Event R_MembersRowDeleted As R_MembersRowChangeEventHandler
        
        Public Event R_MembersRowDeleting As R_MembersRowChangeEventHandler
        
        Public Overloads Sub AddR_MembersRow(ByVal row As R_MembersRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddR_MembersRow(ByVal KBCI_NO As String, ByVal NAME As String, ByVal MEM_STAT As String, ByVal CHG_DATE As String, ByVal FD_AMOUNT As Decimal) As R_MembersRow
            Dim rowR_MembersRow As R_MembersRow = CType(Me.NewRow,R_MembersRow)
            rowR_MembersRow.ItemArray = New Object() {KBCI_NO, NAME, MEM_STAT, CHG_DATE, FD_AMOUNT}
            Me.Rows.Add(rowR_MembersRow)
            Return rowR_MembersRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As R_MembersDataTable = CType(MyBase.Clone,R_MembersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New R_MembersDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnKBCI_NO = Me.Columns("KBCI_NO")
            Me.columnNAME = Me.Columns("NAME")
            Me.columnMEM_STAT = Me.Columns("MEM_STAT")
            Me.columnCHG_DATE = Me.Columns("CHG_DATE")
            Me.columnFD_AMOUNT = Me.Columns("FD_AMOUNT")
        End Sub
        
        Private Sub InitClass()
            Me.columnKBCI_NO = New DataColumn("KBCI_NO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKBCI_NO)
            Me.columnNAME = New DataColumn("NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNAME)
            Me.columnMEM_STAT = New DataColumn("MEM_STAT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_STAT)
            Me.columnCHG_DATE = New DataColumn("CHG_DATE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCHG_DATE)
            Me.columnFD_AMOUNT = New DataColumn("FD_AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFD_AMOUNT)
        End Sub
        
        Public Function NewR_MembersRow() As R_MembersRow
            Return CType(Me.NewRow,R_MembersRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New R_MembersRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(R_MembersRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.R_MembersRowChangedEvent) Is Nothing) Then
                RaiseEvent R_MembersRowChanged(Me, New R_MembersRowChangeEvent(CType(e.Row,R_MembersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.R_MembersRowChangingEvent) Is Nothing) Then
                RaiseEvent R_MembersRowChanging(Me, New R_MembersRowChangeEvent(CType(e.Row,R_MembersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.R_MembersRowDeletedEvent) Is Nothing) Then
                RaiseEvent R_MembersRowDeleted(Me, New R_MembersRowChangeEvent(CType(e.Row,R_MembersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.R_MembersRowDeletingEvent) Is Nothing) Then
                RaiseEvent R_MembersRowDeleting(Me, New R_MembersRowChangeEvent(CType(e.Row,R_MembersRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveR_MembersRow(ByVal row As R_MembersRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class R_MembersRow
        Inherits DataRow
        
        Private tableR_Members As R_MembersDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableR_Members = CType(Me.Table,R_MembersDataTable)
        End Sub
        
        Public Property KBCI_NO As String
            Get
                Try 
                    Return CType(Me(Me.tableR_Members.KBCI_NOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableR_Members.KBCI_NOColumn) = value
            End Set
        End Property
        
        Public Property NAME As String
            Get
                Try 
                    Return CType(Me(Me.tableR_Members.NAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableR_Members.NAMEColumn) = value
            End Set
        End Property
        
        Public Property MEM_STAT As String
            Get
                Try 
                    Return CType(Me(Me.tableR_Members.MEM_STATColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableR_Members.MEM_STATColumn) = value
            End Set
        End Property
        
        Public Property CHG_DATE As String
            Get
                Try 
                    Return CType(Me(Me.tableR_Members.CHG_DATEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableR_Members.CHG_DATEColumn) = value
            End Set
        End Property
        
        Public Property FD_AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableR_Members.FD_AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableR_Members.FD_AMOUNTColumn) = value
            End Set
        End Property
        
        Public Function IsKBCI_NONull() As Boolean
            Return Me.IsNull(Me.tableR_Members.KBCI_NOColumn)
        End Function
        
        Public Sub SetKBCI_NONull()
            Me(Me.tableR_Members.KBCI_NOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNAMENull() As Boolean
            Return Me.IsNull(Me.tableR_Members.NAMEColumn)
        End Function
        
        Public Sub SetNAMENull()
            Me(Me.tableR_Members.NAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_STATNull() As Boolean
            Return Me.IsNull(Me.tableR_Members.MEM_STATColumn)
        End Function
        
        Public Sub SetMEM_STATNull()
            Me(Me.tableR_Members.MEM_STATColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCHG_DATENull() As Boolean
            Return Me.IsNull(Me.tableR_Members.CHG_DATEColumn)
        End Function
        
        Public Sub SetCHG_DATENull()
            Me(Me.tableR_Members.CHG_DATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableR_Members.FD_AMOUNTColumn)
        End Function
        
        Public Sub SetFD_AMOUNTNull()
            Me(Me.tableR_Members.FD_AMOUNTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class R_MembersRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As R_MembersRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As R_MembersRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As R_MembersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FD_RupDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnKBCI_NO As DataColumn
        
        Private columnNAME As DataColumn
        
        Private columnBALANCE As DataColumn
        
        Friend Sub New()
            MyBase.New("FD_Rup")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property KBCI_NOColumn As DataColumn
            Get
                Return Me.columnKBCI_NO
            End Get
        End Property
        
        Friend ReadOnly Property NAMEColumn As DataColumn
            Get
                Return Me.columnNAME
            End Get
        End Property
        
        Friend ReadOnly Property BALANCEColumn As DataColumn
            Get
                Return Me.columnBALANCE
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As FD_RupRow
            Get
                Return CType(Me.Rows(index),FD_RupRow)
            End Get
        End Property
        
        Public Event FD_RupRowChanged As FD_RupRowChangeEventHandler
        
        Public Event FD_RupRowChanging As FD_RupRowChangeEventHandler
        
        Public Event FD_RupRowDeleted As FD_RupRowChangeEventHandler
        
        Public Event FD_RupRowDeleting As FD_RupRowChangeEventHandler
        
        Public Overloads Sub AddFD_RupRow(ByVal row As FD_RupRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddFD_RupRow(ByVal KBCI_NO As String, ByVal NAME As String, ByVal BALANCE As Decimal) As FD_RupRow
            Dim rowFD_RupRow As FD_RupRow = CType(Me.NewRow,FD_RupRow)
            rowFD_RupRow.ItemArray = New Object() {KBCI_NO, NAME, BALANCE}
            Me.Rows.Add(rowFD_RupRow)
            Return rowFD_RupRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As FD_RupDataTable = CType(MyBase.Clone,FD_RupDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New FD_RupDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnKBCI_NO = Me.Columns("KBCI_NO")
            Me.columnNAME = Me.Columns("NAME")
            Me.columnBALANCE = Me.Columns("BALANCE")
        End Sub
        
        Private Sub InitClass()
            Me.columnKBCI_NO = New DataColumn("KBCI_NO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKBCI_NO)
            Me.columnNAME = New DataColumn("NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNAME)
            Me.columnBALANCE = New DataColumn("BALANCE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBALANCE)
        End Sub
        
        Public Function NewFD_RupRow() As FD_RupRow
            Return CType(Me.NewRow,FD_RupRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New FD_RupRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FD_RupRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FD_RupRowChangedEvent) Is Nothing) Then
                RaiseEvent FD_RupRowChanged(Me, New FD_RupRowChangeEvent(CType(e.Row,FD_RupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FD_RupRowChangingEvent) Is Nothing) Then
                RaiseEvent FD_RupRowChanging(Me, New FD_RupRowChangeEvent(CType(e.Row,FD_RupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FD_RupRowDeletedEvent) Is Nothing) Then
                RaiseEvent FD_RupRowDeleted(Me, New FD_RupRowChangeEvent(CType(e.Row,FD_RupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FD_RupRowDeletingEvent) Is Nothing) Then
                RaiseEvent FD_RupRowDeleting(Me, New FD_RupRowChangeEvent(CType(e.Row,FD_RupRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveFD_RupRow(ByVal row As FD_RupRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FD_RupRow
        Inherits DataRow
        
        Private tableFD_Rup As FD_RupDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableFD_Rup = CType(Me.Table,FD_RupDataTable)
        End Sub
        
        Public Property KBCI_NO As String
            Get
                Try 
                    Return CType(Me(Me.tableFD_Rup.KBCI_NOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFD_Rup.KBCI_NOColumn) = value
            End Set
        End Property
        
        Public Property NAME As String
            Get
                Try 
                    Return CType(Me(Me.tableFD_Rup.NAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFD_Rup.NAMEColumn) = value
            End Set
        End Property
        
        Public Property BALANCE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFD_Rup.BALANCEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFD_Rup.BALANCEColumn) = value
            End Set
        End Property
        
        Public Function IsKBCI_NONull() As Boolean
            Return Me.IsNull(Me.tableFD_Rup.KBCI_NOColumn)
        End Function
        
        Public Sub SetKBCI_NONull()
            Me(Me.tableFD_Rup.KBCI_NOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNAMENull() As Boolean
            Return Me.IsNull(Me.tableFD_Rup.NAMEColumn)
        End Function
        
        Public Sub SetNAMENull()
            Me(Me.tableFD_Rup.NAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBALANCENull() As Boolean
            Return Me.IsNull(Me.tableFD_Rup.BALANCEColumn)
        End Function
        
        Public Sub SetBALANCENull()
            Me(Me.tableFD_Rup.BALANCEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FD_RupRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As FD_RupRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As FD_RupRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As FD_RupRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CASHDIVRDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnKBCI_NO As DataColumn
        
        Private columnNAME As DataColumn
        
        Private columnFD_AMT As DataColumn
        
        Private columnDIV_AMT As DataColumn
        
        Private columnDEDNS As DataColumn
        
        Private column_REGION As DataColumn
        
        Friend Sub New()
            MyBase.New("CASHDIVR")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property KBCI_NOColumn As DataColumn
            Get
                Return Me.columnKBCI_NO
            End Get
        End Property
        
        Friend ReadOnly Property NAMEColumn As DataColumn
            Get
                Return Me.columnNAME
            End Get
        End Property
        
        Friend ReadOnly Property FD_AMTColumn As DataColumn
            Get
                Return Me.columnFD_AMT
            End Get
        End Property
        
        Friend ReadOnly Property DIV_AMTColumn As DataColumn
            Get
                Return Me.columnDIV_AMT
            End Get
        End Property
        
        Friend ReadOnly Property DEDNSColumn As DataColumn
            Get
                Return Me.columnDEDNS
            End Get
        End Property
        
        Friend ReadOnly Property _REGIONColumn As DataColumn
            Get
                Return Me.column_REGION
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CASHDIVRRow
            Get
                Return CType(Me.Rows(index),CASHDIVRRow)
            End Get
        End Property
        
        Public Event CASHDIVRRowChanged As CASHDIVRRowChangeEventHandler
        
        Public Event CASHDIVRRowChanging As CASHDIVRRowChangeEventHandler
        
        Public Event CASHDIVRRowDeleted As CASHDIVRRowChangeEventHandler
        
        Public Event CASHDIVRRowDeleting As CASHDIVRRowChangeEventHandler
        
        Public Overloads Sub AddCASHDIVRRow(ByVal row As CASHDIVRRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCASHDIVRRow(ByVal KBCI_NO As String, ByVal NAME As String, ByVal FD_AMT As Decimal, ByVal DIV_AMT As Decimal, ByVal DEDNS As Decimal, ByVal _REGION As String) As CASHDIVRRow
            Dim rowCASHDIVRRow As CASHDIVRRow = CType(Me.NewRow,CASHDIVRRow)
            rowCASHDIVRRow.ItemArray = New Object() {KBCI_NO, NAME, FD_AMT, DIV_AMT, DEDNS, _REGION}
            Me.Rows.Add(rowCASHDIVRRow)
            Return rowCASHDIVRRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CASHDIVRDataTable = CType(MyBase.Clone,CASHDIVRDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CASHDIVRDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnKBCI_NO = Me.Columns("KBCI_NO")
            Me.columnNAME = Me.Columns("NAME")
            Me.columnFD_AMT = Me.Columns("FD_AMT")
            Me.columnDIV_AMT = Me.Columns("DIV_AMT")
            Me.columnDEDNS = Me.Columns("DEDNS")
            Me.column_REGION = Me.Columns("REGION")
        End Sub
        
        Private Sub InitClass()
            Me.columnKBCI_NO = New DataColumn("KBCI_NO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKBCI_NO)
            Me.columnNAME = New DataColumn("NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNAME)
            Me.columnFD_AMT = New DataColumn("FD_AMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFD_AMT)
            Me.columnDIV_AMT = New DataColumn("DIV_AMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDIV_AMT)
            Me.columnDEDNS = New DataColumn("DEDNS", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDEDNS)
            Me.column_REGION = New DataColumn("REGION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_REGION)
        End Sub
        
        Public Function NewCASHDIVRRow() As CASHDIVRRow
            Return CType(Me.NewRow,CASHDIVRRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CASHDIVRRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CASHDIVRRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CASHDIVRRowChangedEvent) Is Nothing) Then
                RaiseEvent CASHDIVRRowChanged(Me, New CASHDIVRRowChangeEvent(CType(e.Row,CASHDIVRRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CASHDIVRRowChangingEvent) Is Nothing) Then
                RaiseEvent CASHDIVRRowChanging(Me, New CASHDIVRRowChangeEvent(CType(e.Row,CASHDIVRRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CASHDIVRRowDeletedEvent) Is Nothing) Then
                RaiseEvent CASHDIVRRowDeleted(Me, New CASHDIVRRowChangeEvent(CType(e.Row,CASHDIVRRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CASHDIVRRowDeletingEvent) Is Nothing) Then
                RaiseEvent CASHDIVRRowDeleting(Me, New CASHDIVRRowChangeEvent(CType(e.Row,CASHDIVRRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCASHDIVRRow(ByVal row As CASHDIVRRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CASHDIVRRow
        Inherits DataRow
        
        Private tableCASHDIVR As CASHDIVRDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCASHDIVR = CType(Me.Table,CASHDIVRDataTable)
        End Sub
        
        Public Property KBCI_NO As String
            Get
                Try 
                    Return CType(Me(Me.tableCASHDIVR.KBCI_NOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCASHDIVR.KBCI_NOColumn) = value
            End Set
        End Property
        
        Public Property NAME As String
            Get
                Try 
                    Return CType(Me(Me.tableCASHDIVR.NAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCASHDIVR.NAMEColumn) = value
            End Set
        End Property
        
        Public Property FD_AMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCASHDIVR.FD_AMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCASHDIVR.FD_AMTColumn) = value
            End Set
        End Property
        
        Public Property DIV_AMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCASHDIVR.DIV_AMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCASHDIVR.DIV_AMTColumn) = value
            End Set
        End Property
        
        Public Property DEDNS As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCASHDIVR.DEDNSColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCASHDIVR.DEDNSColumn) = value
            End Set
        End Property
        
        Public Property _REGION As String
            Get
                Try 
                    Return CType(Me(Me.tableCASHDIVR._REGIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCASHDIVR._REGIONColumn) = value
            End Set
        End Property
        
        Public Function IsKBCI_NONull() As Boolean
            Return Me.IsNull(Me.tableCASHDIVR.KBCI_NOColumn)
        End Function
        
        Public Sub SetKBCI_NONull()
            Me(Me.tableCASHDIVR.KBCI_NOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNAMENull() As Boolean
            Return Me.IsNull(Me.tableCASHDIVR.NAMEColumn)
        End Function
        
        Public Sub SetNAMENull()
            Me(Me.tableCASHDIVR.NAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFD_AMTNull() As Boolean
            Return Me.IsNull(Me.tableCASHDIVR.FD_AMTColumn)
        End Function
        
        Public Sub SetFD_AMTNull()
            Me(Me.tableCASHDIVR.FD_AMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDIV_AMTNull() As Boolean
            Return Me.IsNull(Me.tableCASHDIVR.DIV_AMTColumn)
        End Function
        
        Public Sub SetDIV_AMTNull()
            Me(Me.tableCASHDIVR.DIV_AMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDEDNSNull() As Boolean
            Return Me.IsNull(Me.tableCASHDIVR.DEDNSColumn)
        End Function
        
        Public Sub SetDEDNSNull()
            Me(Me.tableCASHDIVR.DEDNSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_REGIONNull() As Boolean
            Return Me.IsNull(Me.tableCASHDIVR._REGIONColumn)
        End Function
        
        Public Sub Set_REGIONNull()
            Me(Me.tableCASHDIVR._REGIONColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CASHDIVRRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CASHDIVRRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CASHDIVRRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CASHDIVRRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PATREFDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnACCTNO As DataColumn
        
        Private columnNAME As DataColumn
        
        Private columnAPLINT As DataColumn
        
        Private columnEDLINT As DataColumn
        
        Private columnEMLINT As DataColumn
        
        Private columnRGLINT As DataColumn
        
        Private columnRSLINT As DataColumn
        
        Private columnSPLINT As DataColumn
        
        Private columnLHLINT As DataColumn
        
        Private columnSTLINT As DataColumn
        
        Private columnPTLINT As DataColumn
        
        Friend Sub New()
            MyBase.New("PATREF")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ACCTNOColumn As DataColumn
            Get
                Return Me.columnACCTNO
            End Get
        End Property
        
        Friend ReadOnly Property NAMEColumn As DataColumn
            Get
                Return Me.columnNAME
            End Get
        End Property
        
        Friend ReadOnly Property APLINTColumn As DataColumn
            Get
                Return Me.columnAPLINT
            End Get
        End Property
        
        Friend ReadOnly Property EDLINTColumn As DataColumn
            Get
                Return Me.columnEDLINT
            End Get
        End Property
        
        Friend ReadOnly Property EMLINTColumn As DataColumn
            Get
                Return Me.columnEMLINT
            End Get
        End Property
        
        Friend ReadOnly Property RGLINTColumn As DataColumn
            Get
                Return Me.columnRGLINT
            End Get
        End Property
        
        Friend ReadOnly Property RSLINTColumn As DataColumn
            Get
                Return Me.columnRSLINT
            End Get
        End Property
        
        Friend ReadOnly Property SPLINTColumn As DataColumn
            Get
                Return Me.columnSPLINT
            End Get
        End Property
        
        Friend ReadOnly Property LHLINTColumn As DataColumn
            Get
                Return Me.columnLHLINT
            End Get
        End Property
        
        Friend ReadOnly Property STLINTColumn As DataColumn
            Get
                Return Me.columnSTLINT
            End Get
        End Property
        
        Friend ReadOnly Property PTLINTColumn As DataColumn
            Get
                Return Me.columnPTLINT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PATREFRow
            Get
                Return CType(Me.Rows(index),PATREFRow)
            End Get
        End Property
        
        Public Event PATREFRowChanged As PATREFRowChangeEventHandler
        
        Public Event PATREFRowChanging As PATREFRowChangeEventHandler
        
        Public Event PATREFRowDeleted As PATREFRowChangeEventHandler
        
        Public Event PATREFRowDeleting As PATREFRowChangeEventHandler
        
        Public Overloads Sub AddPATREFRow(ByVal row As PATREFRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPATREFRow(ByVal ACCTNO As String, ByVal NAME As String, ByVal APLINT As Decimal, ByVal EDLINT As Decimal, ByVal EMLINT As Decimal, ByVal RGLINT As Decimal, ByVal RSLINT As Decimal, ByVal SPLINT As Decimal, ByVal LHLINT As Decimal, ByVal STLINT As Decimal, ByVal PTLINT As Decimal) As PATREFRow
            Dim rowPATREFRow As PATREFRow = CType(Me.NewRow,PATREFRow)
            rowPATREFRow.ItemArray = New Object() {ACCTNO, NAME, APLINT, EDLINT, EMLINT, RGLINT, RSLINT, SPLINT, LHLINT, STLINT, PTLINT}
            Me.Rows.Add(rowPATREFRow)
            Return rowPATREFRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PATREFDataTable = CType(MyBase.Clone,PATREFDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PATREFDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnACCTNO = Me.Columns("ACCTNO")
            Me.columnNAME = Me.Columns("NAME")
            Me.columnAPLINT = Me.Columns("APLINT")
            Me.columnEDLINT = Me.Columns("EDLINT")
            Me.columnEMLINT = Me.Columns("EMLINT")
            Me.columnRGLINT = Me.Columns("RGLINT")
            Me.columnRSLINT = Me.Columns("RSLINT")
            Me.columnSPLINT = Me.Columns("SPLINT")
            Me.columnLHLINT = Me.Columns("LHLINT")
            Me.columnSTLINT = Me.Columns("STLINT")
            Me.columnPTLINT = Me.Columns("PTLINT")
        End Sub
        
        Private Sub InitClass()
            Me.columnACCTNO = New DataColumn("ACCTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnACCTNO)
            Me.columnNAME = New DataColumn("NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNAME)
            Me.columnAPLINT = New DataColumn("APLINT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAPLINT)
            Me.columnEDLINT = New DataColumn("EDLINT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEDLINT)
            Me.columnEMLINT = New DataColumn("EMLINT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMLINT)
            Me.columnRGLINT = New DataColumn("RGLINT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRGLINT)
            Me.columnRSLINT = New DataColumn("RSLINT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRSLINT)
            Me.columnSPLINT = New DataColumn("SPLINT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPLINT)
            Me.columnLHLINT = New DataColumn("LHLINT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLHLINT)
            Me.columnSTLINT = New DataColumn("STLINT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTLINT)
            Me.columnPTLINT = New DataColumn("PTLINT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPTLINT)
        End Sub
        
        Public Function NewPATREFRow() As PATREFRow
            Return CType(Me.NewRow,PATREFRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PATREFRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PATREFRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PATREFRowChangedEvent) Is Nothing) Then
                RaiseEvent PATREFRowChanged(Me, New PATREFRowChangeEvent(CType(e.Row,PATREFRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PATREFRowChangingEvent) Is Nothing) Then
                RaiseEvent PATREFRowChanging(Me, New PATREFRowChangeEvent(CType(e.Row,PATREFRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PATREFRowDeletedEvent) Is Nothing) Then
                RaiseEvent PATREFRowDeleted(Me, New PATREFRowChangeEvent(CType(e.Row,PATREFRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PATREFRowDeletingEvent) Is Nothing) Then
                RaiseEvent PATREFRowDeleting(Me, New PATREFRowChangeEvent(CType(e.Row,PATREFRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePATREFRow(ByVal row As PATREFRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PATREFRow
        Inherits DataRow
        
        Private tablePATREF As PATREFDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePATREF = CType(Me.Table,PATREFDataTable)
        End Sub
        
        Public Property ACCTNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePATREF.ACCTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePATREF.ACCTNOColumn) = value
            End Set
        End Property
        
        Public Property NAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePATREF.NAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePATREF.NAMEColumn) = value
            End Set
        End Property
        
        Public Property APLINT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePATREF.APLINTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePATREF.APLINTColumn) = value
            End Set
        End Property
        
        Public Property EDLINT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePATREF.EDLINTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePATREF.EDLINTColumn) = value
            End Set
        End Property
        
        Public Property EMLINT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePATREF.EMLINTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePATREF.EMLINTColumn) = value
            End Set
        End Property
        
        Public Property RGLINT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePATREF.RGLINTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePATREF.RGLINTColumn) = value
            End Set
        End Property
        
        Public Property RSLINT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePATREF.RSLINTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePATREF.RSLINTColumn) = value
            End Set
        End Property
        
        Public Property SPLINT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePATREF.SPLINTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePATREF.SPLINTColumn) = value
            End Set
        End Property
        
        Public Property LHLINT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePATREF.LHLINTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePATREF.LHLINTColumn) = value
            End Set
        End Property
        
        Public Property STLINT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePATREF.STLINTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePATREF.STLINTColumn) = value
            End Set
        End Property
        
        Public Property PTLINT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePATREF.PTLINTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePATREF.PTLINTColumn) = value
            End Set
        End Property
        
        Public Function IsACCTNONull() As Boolean
            Return Me.IsNull(Me.tablePATREF.ACCTNOColumn)
        End Function
        
        Public Sub SetACCTNONull()
            Me(Me.tablePATREF.ACCTNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNAMENull() As Boolean
            Return Me.IsNull(Me.tablePATREF.NAMEColumn)
        End Function
        
        Public Sub SetNAMENull()
            Me(Me.tablePATREF.NAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAPLINTNull() As Boolean
            Return Me.IsNull(Me.tablePATREF.APLINTColumn)
        End Function
        
        Public Sub SetAPLINTNull()
            Me(Me.tablePATREF.APLINTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEDLINTNull() As Boolean
            Return Me.IsNull(Me.tablePATREF.EDLINTColumn)
        End Function
        
        Public Sub SetEDLINTNull()
            Me(Me.tablePATREF.EDLINTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMLINTNull() As Boolean
            Return Me.IsNull(Me.tablePATREF.EMLINTColumn)
        End Function
        
        Public Sub SetEMLINTNull()
            Me(Me.tablePATREF.EMLINTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRGLINTNull() As Boolean
            Return Me.IsNull(Me.tablePATREF.RGLINTColumn)
        End Function
        
        Public Sub SetRGLINTNull()
            Me(Me.tablePATREF.RGLINTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRSLINTNull() As Boolean
            Return Me.IsNull(Me.tablePATREF.RSLINTColumn)
        End Function
        
        Public Sub SetRSLINTNull()
            Me(Me.tablePATREF.RSLINTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPLINTNull() As Boolean
            Return Me.IsNull(Me.tablePATREF.SPLINTColumn)
        End Function
        
        Public Sub SetSPLINTNull()
            Me(Me.tablePATREF.SPLINTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLHLINTNull() As Boolean
            Return Me.IsNull(Me.tablePATREF.LHLINTColumn)
        End Function
        
        Public Sub SetLHLINTNull()
            Me(Me.tablePATREF.LHLINTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTLINTNull() As Boolean
            Return Me.IsNull(Me.tablePATREF.STLINTColumn)
        End Function
        
        Public Sub SetSTLINTNull()
            Me(Me.tablePATREF.STLINTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPTLINTNull() As Boolean
            Return Me.IsNull(Me.tablePATREF.PTLINTColumn)
        End Function
        
        Public Sub SetPTLINTNull()
            Me(Me.tablePATREF.PTLINTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PATREFRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PATREFRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PATREFRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PATREFRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PATREFSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnKBCI_NO As DataColumn
        
        Private columnNAME As DataColumn
        
        Private columnINT_PAID As DataColumn
        
        Private columnREFUND As DataColumn
        
        Friend Sub New()
            MyBase.New("PATREFS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property KBCI_NOColumn As DataColumn
            Get
                Return Me.columnKBCI_NO
            End Get
        End Property
        
        Friend ReadOnly Property NAMEColumn As DataColumn
            Get
                Return Me.columnNAME
            End Get
        End Property
        
        Friend ReadOnly Property INT_PAIDColumn As DataColumn
            Get
                Return Me.columnINT_PAID
            End Get
        End Property
        
        Friend ReadOnly Property REFUNDColumn As DataColumn
            Get
                Return Me.columnREFUND
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PATREFSRow
            Get
                Return CType(Me.Rows(index),PATREFSRow)
            End Get
        End Property
        
        Public Event PATREFSRowChanged As PATREFSRowChangeEventHandler
        
        Public Event PATREFSRowChanging As PATREFSRowChangeEventHandler
        
        Public Event PATREFSRowDeleted As PATREFSRowChangeEventHandler
        
        Public Event PATREFSRowDeleting As PATREFSRowChangeEventHandler
        
        Public Overloads Sub AddPATREFSRow(ByVal row As PATREFSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPATREFSRow(ByVal KBCI_NO As String, ByVal NAME As String, ByVal INT_PAID As Decimal, ByVal REFUND As Decimal) As PATREFSRow
            Dim rowPATREFSRow As PATREFSRow = CType(Me.NewRow,PATREFSRow)
            rowPATREFSRow.ItemArray = New Object() {KBCI_NO, NAME, INT_PAID, REFUND}
            Me.Rows.Add(rowPATREFSRow)
            Return rowPATREFSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PATREFSDataTable = CType(MyBase.Clone,PATREFSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PATREFSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnKBCI_NO = Me.Columns("KBCI_NO")
            Me.columnNAME = Me.Columns("NAME")
            Me.columnINT_PAID = Me.Columns("INT_PAID")
            Me.columnREFUND = Me.Columns("REFUND")
        End Sub
        
        Private Sub InitClass()
            Me.columnKBCI_NO = New DataColumn("KBCI_NO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKBCI_NO)
            Me.columnNAME = New DataColumn("NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNAME)
            Me.columnINT_PAID = New DataColumn("INT_PAID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnINT_PAID)
            Me.columnREFUND = New DataColumn("REFUND", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREFUND)
        End Sub
        
        Public Function NewPATREFSRow() As PATREFSRow
            Return CType(Me.NewRow,PATREFSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PATREFSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PATREFSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PATREFSRowChangedEvent) Is Nothing) Then
                RaiseEvent PATREFSRowChanged(Me, New PATREFSRowChangeEvent(CType(e.Row,PATREFSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PATREFSRowChangingEvent) Is Nothing) Then
                RaiseEvent PATREFSRowChanging(Me, New PATREFSRowChangeEvent(CType(e.Row,PATREFSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PATREFSRowDeletedEvent) Is Nothing) Then
                RaiseEvent PATREFSRowDeleted(Me, New PATREFSRowChangeEvent(CType(e.Row,PATREFSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PATREFSRowDeletingEvent) Is Nothing) Then
                RaiseEvent PATREFSRowDeleting(Me, New PATREFSRowChangeEvent(CType(e.Row,PATREFSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePATREFSRow(ByVal row As PATREFSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PATREFSRow
        Inherits DataRow
        
        Private tablePATREFS As PATREFSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePATREFS = CType(Me.Table,PATREFSDataTable)
        End Sub
        
        Public Property KBCI_NO As String
            Get
                Try 
                    Return CType(Me(Me.tablePATREFS.KBCI_NOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePATREFS.KBCI_NOColumn) = value
            End Set
        End Property
        
        Public Property NAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePATREFS.NAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePATREFS.NAMEColumn) = value
            End Set
        End Property
        
        Public Property INT_PAID As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePATREFS.INT_PAIDColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePATREFS.INT_PAIDColumn) = value
            End Set
        End Property
        
        Public Property REFUND As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePATREFS.REFUNDColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePATREFS.REFUNDColumn) = value
            End Set
        End Property
        
        Public Function IsKBCI_NONull() As Boolean
            Return Me.IsNull(Me.tablePATREFS.KBCI_NOColumn)
        End Function
        
        Public Sub SetKBCI_NONull()
            Me(Me.tablePATREFS.KBCI_NOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNAMENull() As Boolean
            Return Me.IsNull(Me.tablePATREFS.NAMEColumn)
        End Function
        
        Public Sub SetNAMENull()
            Me(Me.tablePATREFS.NAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsINT_PAIDNull() As Boolean
            Return Me.IsNull(Me.tablePATREFS.INT_PAIDColumn)
        End Function
        
        Public Sub SetINT_PAIDNull()
            Me(Me.tablePATREFS.INT_PAIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsREFUNDNull() As Boolean
            Return Me.IsNull(Me.tablePATREFS.REFUNDColumn)
        End Function
        
        Public Sub SetREFUNDNull()
            Me(Me.tablePATREFS.REFUNDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PATREFSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PATREFSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PATREFSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PATREFSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DIVREFREGDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnKBCI_NO As DataColumn
        
        Private columnNAME As DataColumn
        
        Private columnDIVIDEND As DataColumn
        
        Private columnREFUND As DataColumn
        
        Private columnDEDUCTIONS As DataColumn
        
        Private column_REGION As DataColumn
        
        Friend Sub New()
            MyBase.New("DIVREFREG")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property KBCI_NOColumn As DataColumn
            Get
                Return Me.columnKBCI_NO
            End Get
        End Property
        
        Friend ReadOnly Property NAMEColumn As DataColumn
            Get
                Return Me.columnNAME
            End Get
        End Property
        
        Friend ReadOnly Property DIVIDENDColumn As DataColumn
            Get
                Return Me.columnDIVIDEND
            End Get
        End Property
        
        Friend ReadOnly Property REFUNDColumn As DataColumn
            Get
                Return Me.columnREFUND
            End Get
        End Property
        
        Friend ReadOnly Property DEDUCTIONSColumn As DataColumn
            Get
                Return Me.columnDEDUCTIONS
            End Get
        End Property
        
        Friend ReadOnly Property _REGIONColumn As DataColumn
            Get
                Return Me.column_REGION
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DIVREFREGRow
            Get
                Return CType(Me.Rows(index),DIVREFREGRow)
            End Get
        End Property
        
        Public Event DIVREFREGRowChanged As DIVREFREGRowChangeEventHandler
        
        Public Event DIVREFREGRowChanging As DIVREFREGRowChangeEventHandler
        
        Public Event DIVREFREGRowDeleted As DIVREFREGRowChangeEventHandler
        
        Public Event DIVREFREGRowDeleting As DIVREFREGRowChangeEventHandler
        
        Public Overloads Sub AddDIVREFREGRow(ByVal row As DIVREFREGRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDIVREFREGRow(ByVal KBCI_NO As String, ByVal NAME As String, ByVal DIVIDEND As Decimal, ByVal REFUND As Decimal, ByVal DEDUCTIONS As Decimal, ByVal _REGION As String) As DIVREFREGRow
            Dim rowDIVREFREGRow As DIVREFREGRow = CType(Me.NewRow,DIVREFREGRow)
            rowDIVREFREGRow.ItemArray = New Object() {KBCI_NO, NAME, DIVIDEND, REFUND, DEDUCTIONS, _REGION}
            Me.Rows.Add(rowDIVREFREGRow)
            Return rowDIVREFREGRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DIVREFREGDataTable = CType(MyBase.Clone,DIVREFREGDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DIVREFREGDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnKBCI_NO = Me.Columns("KBCI_NO")
            Me.columnNAME = Me.Columns("NAME")
            Me.columnDIVIDEND = Me.Columns("DIVIDEND")
            Me.columnREFUND = Me.Columns("REFUND")
            Me.columnDEDUCTIONS = Me.Columns("DEDUCTIONS")
            Me.column_REGION = Me.Columns("REGION")
        End Sub
        
        Private Sub InitClass()
            Me.columnKBCI_NO = New DataColumn("KBCI_NO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKBCI_NO)
            Me.columnNAME = New DataColumn("NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNAME)
            Me.columnDIVIDEND = New DataColumn("DIVIDEND", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDIVIDEND)
            Me.columnREFUND = New DataColumn("REFUND", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREFUND)
            Me.columnDEDUCTIONS = New DataColumn("DEDUCTIONS", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDEDUCTIONS)
            Me.column_REGION = New DataColumn("REGION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_REGION)
        End Sub
        
        Public Function NewDIVREFREGRow() As DIVREFREGRow
            Return CType(Me.NewRow,DIVREFREGRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DIVREFREGRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DIVREFREGRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DIVREFREGRowChangedEvent) Is Nothing) Then
                RaiseEvent DIVREFREGRowChanged(Me, New DIVREFREGRowChangeEvent(CType(e.Row,DIVREFREGRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DIVREFREGRowChangingEvent) Is Nothing) Then
                RaiseEvent DIVREFREGRowChanging(Me, New DIVREFREGRowChangeEvent(CType(e.Row,DIVREFREGRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DIVREFREGRowDeletedEvent) Is Nothing) Then
                RaiseEvent DIVREFREGRowDeleted(Me, New DIVREFREGRowChangeEvent(CType(e.Row,DIVREFREGRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DIVREFREGRowDeletingEvent) Is Nothing) Then
                RaiseEvent DIVREFREGRowDeleting(Me, New DIVREFREGRowChangeEvent(CType(e.Row,DIVREFREGRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDIVREFREGRow(ByVal row As DIVREFREGRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DIVREFREGRow
        Inherits DataRow
        
        Private tableDIVREFREG As DIVREFREGDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDIVREFREG = CType(Me.Table,DIVREFREGDataTable)
        End Sub
        
        Public Property KBCI_NO As String
            Get
                Try 
                    Return CType(Me(Me.tableDIVREFREG.KBCI_NOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIVREFREG.KBCI_NOColumn) = value
            End Set
        End Property
        
        Public Property NAME As String
            Get
                Try 
                    Return CType(Me(Me.tableDIVREFREG.NAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIVREFREG.NAMEColumn) = value
            End Set
        End Property
        
        Public Property DIVIDEND As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDIVREFREG.DIVIDENDColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIVREFREG.DIVIDENDColumn) = value
            End Set
        End Property
        
        Public Property REFUND As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDIVREFREG.REFUNDColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIVREFREG.REFUNDColumn) = value
            End Set
        End Property
        
        Public Property DEDUCTIONS As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDIVREFREG.DEDUCTIONSColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIVREFREG.DEDUCTIONSColumn) = value
            End Set
        End Property
        
        Public Property _REGION As String
            Get
                Try 
                    Return CType(Me(Me.tableDIVREFREG._REGIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIVREFREG._REGIONColumn) = value
            End Set
        End Property
        
        Public Function IsKBCI_NONull() As Boolean
            Return Me.IsNull(Me.tableDIVREFREG.KBCI_NOColumn)
        End Function
        
        Public Sub SetKBCI_NONull()
            Me(Me.tableDIVREFREG.KBCI_NOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNAMENull() As Boolean
            Return Me.IsNull(Me.tableDIVREFREG.NAMEColumn)
        End Function
        
        Public Sub SetNAMENull()
            Me(Me.tableDIVREFREG.NAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDIVIDENDNull() As Boolean
            Return Me.IsNull(Me.tableDIVREFREG.DIVIDENDColumn)
        End Function
        
        Public Sub SetDIVIDENDNull()
            Me(Me.tableDIVREFREG.DIVIDENDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsREFUNDNull() As Boolean
            Return Me.IsNull(Me.tableDIVREFREG.REFUNDColumn)
        End Function
        
        Public Sub SetREFUNDNull()
            Me(Me.tableDIVREFREG.REFUNDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDEDUCTIONSNull() As Boolean
            Return Me.IsNull(Me.tableDIVREFREG.DEDUCTIONSColumn)
        End Function
        
        Public Sub SetDEDUCTIONSNull()
            Me(Me.tableDIVREFREG.DEDUCTIONSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_REGIONNull() As Boolean
            Return Me.IsNull(Me.tableDIVREFREG._REGIONColumn)
        End Function
        
        Public Sub Set_REGIONNull()
            Me(Me.tableDIVREFREG._REGIONColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DIVREFREGRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DIVREFREGRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DIVREFREGRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DIVREFREGRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VOUCHERDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDESC As DataColumn
        
        Private columnDBT As DataColumn
        
        Private columnCDT As DataColumn
        
        Friend Sub New()
            MyBase.New("VOUCHER")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DESCColumn As DataColumn
            Get
                Return Me.columnDESC
            End Get
        End Property
        
        Friend ReadOnly Property DBTColumn As DataColumn
            Get
                Return Me.columnDBT
            End Get
        End Property
        
        Friend ReadOnly Property CDTColumn As DataColumn
            Get
                Return Me.columnCDT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VOUCHERRow
            Get
                Return CType(Me.Rows(index),VOUCHERRow)
            End Get
        End Property
        
        Public Event VOUCHERRowChanged As VOUCHERRowChangeEventHandler
        
        Public Event VOUCHERRowChanging As VOUCHERRowChangeEventHandler
        
        Public Event VOUCHERRowDeleted As VOUCHERRowChangeEventHandler
        
        Public Event VOUCHERRowDeleting As VOUCHERRowChangeEventHandler
        
        Public Overloads Sub AddVOUCHERRow(ByVal row As VOUCHERRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVOUCHERRow(ByVal DESC As String, ByVal DBT As Decimal, ByVal CDT As Decimal) As VOUCHERRow
            Dim rowVOUCHERRow As VOUCHERRow = CType(Me.NewRow,VOUCHERRow)
            rowVOUCHERRow.ItemArray = New Object() {DESC, DBT, CDT}
            Me.Rows.Add(rowVOUCHERRow)
            Return rowVOUCHERRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VOUCHERDataTable = CType(MyBase.Clone,VOUCHERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VOUCHERDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDESC = Me.Columns("DESC")
            Me.columnDBT = Me.Columns("DBT")
            Me.columnCDT = Me.Columns("CDT")
        End Sub
        
        Private Sub InitClass()
            Me.columnDESC = New DataColumn("DESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDESC)
            Me.columnDBT = New DataColumn("DBT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDBT)
            Me.columnCDT = New DataColumn("CDT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCDT)
        End Sub
        
        Public Function NewVOUCHERRow() As VOUCHERRow
            Return CType(Me.NewRow,VOUCHERRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VOUCHERRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VOUCHERRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VOUCHERRowChangedEvent) Is Nothing) Then
                RaiseEvent VOUCHERRowChanged(Me, New VOUCHERRowChangeEvent(CType(e.Row,VOUCHERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VOUCHERRowChangingEvent) Is Nothing) Then
                RaiseEvent VOUCHERRowChanging(Me, New VOUCHERRowChangeEvent(CType(e.Row,VOUCHERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VOUCHERRowDeletedEvent) Is Nothing) Then
                RaiseEvent VOUCHERRowDeleted(Me, New VOUCHERRowChangeEvent(CType(e.Row,VOUCHERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VOUCHERRowDeletingEvent) Is Nothing) Then
                RaiseEvent VOUCHERRowDeleting(Me, New VOUCHERRowChangeEvent(CType(e.Row,VOUCHERRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVOUCHERRow(ByVal row As VOUCHERRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VOUCHERRow
        Inherits DataRow
        
        Private tableVOUCHER As VOUCHERDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVOUCHER = CType(Me.Table,VOUCHERDataTable)
        End Sub
        
        Public Property DESC As String
            Get
                Try 
                    Return CType(Me(Me.tableVOUCHER.DESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOUCHER.DESCColumn) = value
            End Set
        End Property
        
        Public Property DBT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVOUCHER.DBTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOUCHER.DBTColumn) = value
            End Set
        End Property
        
        Public Property CDT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVOUCHER.CDTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOUCHER.CDTColumn) = value
            End Set
        End Property
        
        Public Function IsDESCNull() As Boolean
            Return Me.IsNull(Me.tableVOUCHER.DESCColumn)
        End Function
        
        Public Sub SetDESCNull()
            Me(Me.tableVOUCHER.DESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDBTNull() As Boolean
            Return Me.IsNull(Me.tableVOUCHER.DBTColumn)
        End Function
        
        Public Sub SetDBTNull()
            Me(Me.tableVOUCHER.DBTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCDTNull() As Boolean
            Return Me.IsNull(Me.tableVOUCHER.CDTColumn)
        End Function
        
        Public Sub SetCDTNull()
            Me(Me.tableVOUCHER.CDTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VOUCHERRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VOUCHERRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VOUCHERRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VOUCHERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
